#include<sys/types.h> /* predefined types */
#include<unistd.h> /* include unix standard library */
#include<arpa/inet.h> /* IP addresses conversion utililites */
#include<sys/socket.h> /* socket library */
#include<stdio.h> /* include standard I/O library */
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<signal.h>
#include<errno.h>
/// server


ssize_t FullWrite(int fd, char *buf, size_t n) {

    size_t nleft = n;
    ssize_t nwritten;
    char * ptr = buf;
    
    while (nleft > 0) {
        if ((nwritten = send(fd, ptr, nleft, MSG_NOSIGNAL)) < 0) {
            if (errno == EINTR) {
            	nwritten = 0; 
            	return FullWrite(fd,buf,n);
            }
            else {
            	return (-1); /* error */
            }
        }
        nleft -= nwritten;
        ptr += nwritten;
    }
    return (n);
}


int logging = 1;

void handler(){
	logging++;
}

int main(int argc, char * argv[]) {

    int list_fd;
	if((list_fd = socket(AF_INET,SOCK_STREAM,0)) < 0){
		perror("socket");
		exit(0);
	}
	
    struct sockaddr_in serv_add;
    serv_add.sin_family = AF_INET;
    serv_add.sin_port = htons(1025); // port 1025
    serv_add.sin_addr.s_addr = htonl(INADDR_ANY);
    
    
    int enable=1;
    if(setsockopt(list_fd, SOL_SOCKET,SO_REUSEADDR, &enable, sizeof(int)) < 0){
    	perror("setsockopt");
    	exit(1);
    }
    
    if(setsockopt(list_fd, SOL_SOCKET,SO_REUSEPORT, &enable, sizeof(int)) < 0){
    	perror("setsockopt");
    	exit(1);
    }
    
    if (bind(list_fd, (struct sockaddr *) &serv_add, sizeof(serv_add)) < 0) {
        perror("bind");
        exit(1);
    }
    
    if (listen(list_fd, 1024) < 0) {
        perror("listen");
        exit(1);
    }

    
    char buffer[4000];
    socklen_t len;
    time_t timeval;
    int i;
    pid_t pid;
    struct sockaddr_in client; 
    int conn_fd;
    
    signal(SIGCHLD, handler);
    
    printf("Start processing ");
    
    while (1) {
        len = sizeof(client);
        
        if((conn_fd = accept(list_fd, (struct sockaddr *) &client, &len)) < 0){
        	perror("accept error");
        	exit(2);
        }
        
        // fork
        if ((pid = fork()) < 0) {
            perror(" fork error ");
            exit(-1);
        }
   
        if (pid == 0) { //parte del figlio
        	
            close(list_fd);
            timeval = time(NULL);
            snprintf(buffer, sizeof(buffer), " %.24s\r\n", ctime( & timeval));
            
            /*
            if(write(conn_fd, buffer, strlen(buffer)) != strlen(buffer)){ // invio al client
            	perror("write error");
            	exit(2);
            }*/
            
            FullWrite(conn_fd, buffer, 4000);
            
            if (logging) { // rimane sul server come info
                inet_ntop(AF_INET, & client.sin_addr, buffer, sizeof(buffer));
                printf("Request (number %d) from host %s, port %d\n",logging, buffer, ntohs(client.sin_port));
            }
            
           	close(conn_fd);
            exit(0);
        } 
        else { // parte del padre
            close(conn_fd);
        }
        
    }

    exit(0);
}
